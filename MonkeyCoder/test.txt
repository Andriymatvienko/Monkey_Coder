.map(Method::getName)\n            .collect(Collectors.toList());\n  }\n', '  public static List<String> getAllFieldNames(final Class<?> cls) {\n    return Arrays.stream(cls.getFields())\n            .map(Field::getName)\n            .collect(Collectors.toList());\n  }\n', '  public static List<String> getAllFieldNames(final Class<?> cls) {\n      var fields = new ArrayList<String>();\n      var currentCls = cls;\n      while (currentCls != null) {\n        fields.addAll(\n            Arrays.stream(currentCls.getDeclaredFields())\n                .filter(field -> !field.isSynthetic())\n                .map(Field::getName)\n                .collect(Collectors.toList()));\n        currentCls = currentCls.getSuperclass();\n      }\n      return fields;\n    }\n', '  public static Object createObject(String cls)\n            throws NoSuchMethodException,\n            IllegalAccessException,\n            InvocationTargetException,\n            InstantiationException,\n            ClassNotFoundException {\n    var objectClass = Class.forName(cls);\n    var objectConstructor = objectClass.getConstructor();\n    return objectConstructor.newInstance();\n  }\n', '  public static List<String> readFile(String fileName) throws FileNotFoundException {\n    try (Stream<String> stream = new BufferedReader(new FileReader(fileName)).lines()) {\n      return stream.collect(Collectors.toList());\n    }\n  }\n', '  public static String inputStreamToString(InputStream inputStream) throws IOException {\n    try (var reader = new BufferedReader(new InputStreamReader(inputStream))) {\n      var stringBuilder = new StringBuilder();\n      var data = reader.read();\n \n      while (data != -1) {\n        stringBuilder.append((char) data);\n        data = reader.read();\n      }\n      return stringBuilder.toString();\n    }\n  }\n', '  public static ExecutorService createFixedThreadPool() {\n    return Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());\n  }\n', '  public static Date addDaysToDate(Date date, int noOfDays){\n    if(date!=null){\n      Calendar cal = Calendar.getInstance();\n      cal.setTime(date);\n      cal.add(Calendar.DAY_OF_MONTH, noOfDays);\n      return cal.getTime();\n    }\n    return null;\n   }\n', ' public static LocalDate addDaysToLocalDate(LocalDate date, long noOfDays){\n    return date!=null ? date.plusDays(noOfDays) : null;\n }\n', ' public static long getYearsDifference(LocalDate firstTime, LocalDate secondTime) {\n   var yearsDifference = ChronoUnit.YEARS.between(firstTime, secondTime);\n   return Math.abs(yearsDifference);\n }\n', ' public static long getMonthsDifference(LocalDate firstTime, LocalDate secondTime) {\n   var monthsDifference = ChronoUnit.MONTHS.between(firstTime, secondTime);\n   return Math.abs(monthsDifference);\n }\n', ' public static long getDaysDifference(LocalDate firstTime, LocalDate secondTime) {\n   var daysDifference = ChronoUnit.DAYS.between(firstTime, secondTime);\n   return Math.abs(daysDifference);\n }\n']